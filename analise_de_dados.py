# -*- coding: utf-8 -*-
"""analise-de-dados.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yOxqf6syx3B0zpBRvHalP2ZM-x_t3k6O
"""

#importar o pandas
import pandas as pd

#instalando o Pacote pandera que fará a validação dos nossos dados

pip install pandera

#instalando o pacote matplotlib que será usado para plotar os nossos gráfico

pip install matplotlib

#importar o matplotlib
from matplotlib import pyplot as plt

#importar o pandera
import pandera as pa

#carregar os dados para o df
df = pd.read_excel('/content/drive/MyDrive/Colab Notebooks/taxigov_geral_limpa.xlsx')

df

#criar um novo DataFrame somente as corridas que foram concluídas
filtro = (df.Status_Corrida == 'CONCLUÍDA') & (df.km_total.notnull())
cc = df.loc[filtro]

cc

#ver os tipos de dados
cc.dtypes

#Apagar os valore nulos das colunas km_total, Valor_corrida, Nome_do_Orgao, Data_Inicio
cc.dropna(subset=['km_total'],inplace=True)
cc.dropna(subset=['Valor_Corrida'],inplace=True)
cc.dropna(subset=['Nome_Orgao'],inplace=True)
cc.dropna(subset=['Data_Inicio'],inplace=True)

#pegar os valores nulos de determinada coluna 
cc.loc[cc.Valor_Corrida.isnull()]

df.dtypes

#convertendo as colunas de tipo float
cc['km_total'] = cc['km_total'].astype('float64')
cc['Valor_Corrida'] = cc['Valor_Corrida'].astype('float64')

#convertendo as colunas de tipo data
cc['Data_Final'] = cc['Data_Final'].astype('datetime64')
cc['Data_Inicio'] = cc['Data_Inicio'].astype('datetime64')

#convertendo as colunas de tipo int
cc['QRU_Corrida'] = cc['QRU_Corrida'].astype('int32')

#Criar um schema pra posteriormente fazer a validação do nosso DataFrame
schema = pa.DataFrameSchema(
	{
		"id_TaxiGov":pa.Column(pa.String, nullable=True),
		"QRU_Corrida":pa.Column(pa.Int32, nullable=True),
		"Status_Corrida":pa.Column(pa.String, nullable=True),
    "Nome_Orgao":pa.Column(pa.String, nullable=True),
    "km_total":pa.Column(pa.Float64, nullable=True),
    "Valor_Corrida":pa.Column(pa.Float64, nullable=True),
    "Data_Inicio":pa.Column(pa.DateTime, nullable=True),
    "Data_Final":pa.Column(pa.DateTime, nullable=True),
    "Origem_Endereco":pa.Column(pa.String, nullable=True),
    "Origem_Cidade":pa.Column(pa.String, nullable=True),
    "Origem_UF":pa.Column(pa.String, pa.Check.str_length(2,2), nullable=True),
		"Destino_Solicitado_Endereco":pa.Column(pa.String, nullable=True)
	}	
)

#validando o schema
schema.validate(cc)

cc.isna().sum()

#Apagando valores iguas a zero da coluna km_total e Valor_Corrida
cc = cc.drop(cc[cc.km_total == 0].index)
cc = cc.drop(cc[cc.Valor_Corrida == 0].index)

#Criando uma coluna nova pra calcular o preço médio do KM = Valor_Corrida/km_total
cc['preco_do_km'] = ((cc.Valor_Corrida) / (cc.km_total))

cc.dtypes

#conferindo se na coluna preco_do_km temos valores nulos
cc.loc[cc['preco_do_km'].isna()]

#apagando registros que tenham valor nulo na coluna preco_do_km
cc.dropna(subset=['preco_do_km'],inplace=True)

#Describe da coluna preco_do_km
cc['preco_do_km'].describe()

#mostrando a soma de todas as corridas
cc['Valor_Corrida'].sum()

cc

# 1 - Qual o preço médio das corridas?
valor_medio_corrida = cc['Valor_Corrida'].mean()
print('O valor médio das corridas é: R$ {:.2f}'.format(valor_medio_corrida))

# 2 - Qual foi o gasto total com corridas durante o período apurado?
primeira_data = cc['Data_Final'].min().strftime('%d/%m/%Y')
ultima_data = cc['Data_Final'].max().strftime('%d/%m/%Y')
quantidade_corridas = cc['Valor_Corrida'].count()
valor_total_corridas = cc['Valor_Corrida'].sum()

print('Durante o período que começou {} e terminou {} foram feitas um total de {:,} com um valor total de: R$ {:,.2f}'.format(primeira_data, ultima_data, quantidade_corridas, valor_total_corridas))

cc.dtypes

cc.Valor_Corrida.sum()

# 3 - Qual a evolução dos gastos com as corridas ano a ano?
agrupamento_anual = cc.groupby([cc['Data_Inicio'].dt.year])['Valor_Corrida'].sum().reset_index()
agrupamento_anual


plt.bar(agrupamento_anual['Data_Inicio'],agrupamento_anual['Valor_Corrida'])

plt.title("Gastos Anuais")
plt.xlabel("Ano")
plt.ylabel("Valor total das corridas(milhões de R$)")
plt.show()

agrupamento_anual

#agrupando a quantidade de corridas feitas pelos órgãos
agrupamento_orgao_valor = cc.groupby('Nome_Orgao')['Valor_Corrida'].count().reset_index()
agrupamento_orgao_valor['qtde_corridas'] = agrupamento_orgao_valor['Valor_Corrida']
agrupamento_orgao_valor.drop(columns=['Valor_Corrida'], inplace=True)

agrupamento_orgao_valor

# 4 - Qual foi o ranking com os 5 órgãos que mais usaram o serviço?
top_5_mais_corridas = agrupamento_orgao_valor.nlargest(5,'qtde_corridas')
plt.barh(top_5_mais_corridas['Nome_Orgao'],top_5_mais_corridas['qtde_corridas'])
plt.yticks(rotation=45)

plt.title("Top 5 Órgão que mais fizeram corridas")
plt.xlabel("Quantidade de Corridas")
plt.ylabel("Nome do Órgão")
plt.show()

# 5 - Qual o preço da corrida mais cara?
valor_mais_cara = cc['Valor_Corrida'].max()

print('A corrida mais cara custou: R$ {:.2f}.'.format(valor_mais_cara))

# 6 - Qual o preço da corrida mais barata?
valor_mais_barata = cc['Valor_Corrida'].min()

print('A corrida mais cara custou: R$ {:.2f}.'.format(valor_mais_barata))